1) What happens when you initialize a repository? Why do you need to do it?

2) How is the staging area different from the working directory and the repository?
   What value do you think it offers?

2.5) Commit message guide: http://udacity.github.io/git-styleguide/

3) How can you use the staging area to make sure you have one commit per logical change?

4) What are some situations when branches would be helpful in keeping your history organized?
   How would branches help?
   * master/production branch -- never breaks, always works
   * create experimental changes in a development branch: incremental OR massive AND be able to go back to earlier versions
   * create completely different-versions
   * moving onto a completely different piece of work - create a new feature, fix a bug
   * collaborate with yourself -- be able to context switch on different work / if you are bored with current fix
   * collaborate with other individuals in a team -- merge branches/changes eventually (after testing)

5) How do the diagrams help you visualize the branch structure?
   * tells us about the reachability of commits (based on id) -- so that changes don't become unreachable and lost

6) What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
   * merging (lines of files) can be very very subjective and situational -- will need to collaborate with the individuals to resolve
   * when merging one branch into another (say x_branch into master), one can retain and view the commit histories of both branches
   * you can delete a branch (branch name) after merging

7) What are the pros and cons of git's automatic merging vs. always doing merges manually?



-----------------    git add     ------------    git commit    ----------
working-directory  ----------->  staging-area  ------------->  repository
-----------------                ------------                  ----------
                     git diff                 git diff --staged     git diff <old_commit_id> <new_commit_id>
                                                                    git show
                                                                    git show <cid>


git add  <filename>               # add file  FROM  working-directory  TO  staging-area
git commit			  # commit    FROM  staging-area       TO  repository   (follow guidelines for message)

git status                        # view status
git log                           # view log of commits

git diff                          # view changes between  working-directory  and  staging-area
git diff --staged                 # view changes between                          staging-area  and  repository (current-HEAD)
git diff HEAD                     # view changes between  working-directory  and                     repository (current-HEAD)
git diff <old_cid> <new_cid>      # view changes between                                             two commits in the repository
git show                          # compare current commit with parent commit (when histories are merged)
git show <cid>                    # compare commit <cid> with it's parent commit

git reset <filename>              # remove file from staging area
git reset --hard                  # (irreversible) discard changes in working-directory AND staging-area
git commit -m "your message"      # commit from staging area, follow guidelines for message

git branch                        # show current branch
git branch <branch_name>          # create new branch called "branch_name" from present commit/branch
git checkout <branch_name>        # change to branch_name
git checkout -b <branch_name>     # create and checkout branch_name (from present commit/branch)
git log                           # see commit history for current branch
git log --graph --oneline         # see commit history graph for current branch (one line per commit)
git log --graph --oneline  master <branch_name>    # see commit history graph (compare "master" with "branch_name")

# Merge
# -----
git checkout <branch1>            # first checkout "branch to merge into"
git merge <branch1> <branch2>     # merge branch2 into branch1 (will include commit histories from both branches)
                                  #   - will also include the currently checked-out branch in the merged version
                                  #   - so always checkout the branch label you want to point to the new commit PRIOR TO doing the merge
git log --graph --oneline         # see commit history after merge
git branch -d <branch2>           # delete branch2 label, since you don't need the label anymore (can access branch2 commits from merged branch1)

example: merge coins into master and look at the graph
  git checkout master
  git merge coins
  git log --graph --oneline
  git branch -d coins

git merge --abort                 # Restore files to the state before you started the merge
