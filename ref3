1) Share code in repositories on github (includes several personal and open-source projects)
   Collaborate on code projects with other individuals.
   * Public  -- Anyone can see/clone the git repository. You as a "maintainer" can choose who can commit. Do code reviews. Test infrastructure?
   * Private -- Paid. You can choose who can see and commit to the git repository.

2) Add ssh-key
   https://help.github.com/articles/caching-your-github-password-in-git/

3) In order to push/pull to/from github, you need to:
   * FIRST create the repository on github --> use the + button on the webpage
   * THEN label it on your local machine

4) Now you can view your repository files and commits on github.
   You can add new files on github itself OR push from a different computer.

5) When would you want to use a remote repository rather than keeping all your work local?

6) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

7) Forking = cloning any repo on github itself (while keeping the link to the original repo, and assigning credit to original author(s))
   On github, you can now GO TO settings and ADD collaborators to the fork.
   You can now git clone the forked repo on your local machine, make edits, without affecting the original repo BUT having the link on github

8) Describe the differences between forks, clones, and branches. When would you use one instead of another?

9) Conflicts between local and remote repos arise WHEN:
   * there are multiple collaborators changing the same lines in files
   * same lines in files have been changed in local and on remote github


git remote                              # view remote repositories

git remote add <remote_label> <url>     # create label "remote_label" (eg: origin) to existing "url" on github
git remote -v                           # view verbose description of remote repo labels
git push <remote_label> master          # push changes from local (master) to remote (remote_label)
Make changes on github / another machine
git pull <remote_label> master          # pull remote repo (eg: origin) changes to local repo branch master AND merge them!
                                        # - which is: git pull <remote_label> master == git fetch <remote_label>  &&  git merge master <remote_label>/master
                                        #         eg: git pull origin master == git fetch origin  &&  git merge master origin/master

Fork repo on github
git clone <url>                         # clone forked repo on local, cloning setups up the remote label for you
                                        # - it ALSO locally saves the state of all the remote braches as: remotes/<remote_label>/<remote_branch> eg: remotes/origin/master
git remote -v                           # git clone already setup the push and pull to "remote_label" (eg: origin)

git fetch origin                                  # 
git branch -a                                     # 
git log --graph --oneline master origin/master    # 
